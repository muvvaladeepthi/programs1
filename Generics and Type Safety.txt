Generics and Type Safety
-------------------------

Generics in Java are essential for several reasons, primarily related to improving type safety, code reusability, and readability.

1. Type Safety
----------------
Generics allow for compile-time type checking, which helps to prevent runtime errors caused by type mismatches. By specifying the type of objects that a collection (or other generic class) can contain, you eliminate the need for explicit type casting and reduce the risk of ClassCastException.

Generics in Java provide a way to parameterize types, allowing classes, interfaces, and methods to operate on objects of various types while providing compile-time type safety. This means that you can write more flexible and reusable code while avoiding many types of runtime errors.


Key Concepts of Generics
-------------------------
Generic Classes and Interfaces: 
Define classes and interfaces with type parameters.

public class Box<T> {
    private T content;

    public void setContent(T content) {
        this.content = content;
    }

    public T getContent() {
        return content;
    }

    public static void main(String[] args) {
        Box<String> stringBox = new Box<>();
        stringBox.setContent("Hello, Generics");
        System.out.println("String content: " + stringBox.getContent());

        Box<Integer> integerBox = new Box<>();
        integerBox.setContent(123);
        System.out.println("Integer content: " + integerBox.getContent());
    }
}



Generic Methods: 
Define methods with type parameters.
public class GenericMethodExample {

    public static <T> void printArray(T[] array) {
        for (T element : array) {
            System.out.print(element + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Integer[] intArray = {1, 2, 3, 4, 5};
        String[] stringArray = {"Hello", "World"};

        printArray(intArray);
        printArray(stringArray);
    }
}



Bounded Type Parameters: 
Restrict the types that can be used as type arguments.
public class BoundedTypeExample {

    public static <T extends Number> double add(T a, T b) {
        return a.doubleValue() + b.doubleValue();
    }

    public static void main(String[] args) {
        System.out.println("Sum of 3 and 4: " + add(3, 4));
        System.out.println("Sum of 5.5 and 6.5: " + add(5.5, 6.5));
    }
}



Wildcards: 
Allow flexibility in the types that can be used as arguments.
import java.util.ArrayList;
import java.util.List;

public class WildcardExample {

    public static void printList(List<?> list) {
        for (Object element : list) {
            System.out.print(element + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        List<Integer> intList = new ArrayList<>();
        intList.add(1);
        intList.add(2);
        intList.add(3);

        List<String> stringList = new ArrayList<>();
        stringList.add("Hello");
        stringList.add("World");

        printList(intList);
        printList(stringList);
    }
}



Type Erasure: 
A mechanism by which Java generics are implemented, where generic type information is removed at runtime.
import java.util.ArrayList;
import java.util.List;

public class WithoutGenericsExample {

    public static void main(String[] args) {
        List list = new ArrayList();
        list.add("Hello");
        list.add(123);

        for (Object obj : list) {
            String str = (String) obj;  // Causes ClassCastException at runtime
            System.out.println(str);
        }
    }
}




